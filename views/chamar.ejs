<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Sistema de Atendimento</title>
    <link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <div class="container text-center mt-5">
        <h1 class="mb-4">Próxima Senha</h1>
        <div class="display-1 fw-bold text-primary" id="senhaDisplay">--</div>
        <button class="btn btn-success mt-4" id="chamarSenha">Chamar Próxima Senha</button>
    </div>

    <!-- <div class="container mt-5">
        <h2>Últimos Atendimentos</h2>
        <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
            <table class="table table-striped">
                <thead>
                    <tr><th>Senha</th></tr>
                </thead>
                <tbody id="tabelaAtendidos"></tbody>
            </table>
        </div>
    </div> -->

    <div class="container mt-5">
        <h2>Senhas Aguardando</h2>
        <div class="row">
            <div class="col-md-6">
                <h4>Normais</h4>
                <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Senha</th>
                            </tr>
                        </thead>
                        <tbody id="tabelaNormais"></tbody>
                    </table>
                </div>
            </div>
            <div class="col-md-6">
                <h4>Prioritárias</h4>
                <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Senha</th>
                            </tr>
                        </thead>
                        <tbody id="tabelaPrioritarias"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        const host = "<%= host %>";
        const port = "<%= port %>";

        const socket = io(`http://${host}:${port}`);
        const senhaDisplay = document.getElementById('senhaDisplay');
        const chamarSenhaBtn = document.getElementById('chamarSenha');
        const tabelaAtendidos = document.getElementById('tabelaAtendidos');
        const tabelaNormais = document.getElementById('tabelaNormais');
        const tabelaPrioritarias = document.getElementById('tabelaPrioritarias');

        chamarSenhaBtn.addEventListener('click', () => {
            socket.emit('request_sea');
        });

        socket.on('called_sea', (senha) => {
            senhaDisplay.textContent = senha;
        });

        socket.on('queue_status', (data) => {
            //atualizarTabela(tabelaAtendidos, data.served);
            // Store previous row counts to compare
            const previousNormalRows = tabelaNormais.querySelectorAll('tbody tr').length;
            const previousPriorityRows = tabelaPrioritarias.querySelectorAll('tbody tr').length;

            // Update the tables
            atualizarTabela(tabelaNormais, data.waitingNormal);
            atualizarTabela(tabelaPrioritarias, data.waitingPriority);

            // Check if new rows were added
            const currentNormalRows = tabelaNormais.querySelectorAll('tbody tr').length;
            const currentPriorityRows = tabelaPrioritarias.querySelectorAll('tbody tr').length;

            // Only send notification if rows were added to either table
            if (currentNormalRows > previousNormalRows || currentPriorityRows > previousPriorityRows) {
                enviarNotificao();
            }
        });

        function atualizarTabela(elemento, dados) {
            elemento.innerHTML = dados.map(senha => `<tr><td>${senha}</td></tr>`).join('');
        }

        function enviarNotificao() {
            // Verifica se o navegador suporta notificações
            if ("Notification" in window) {
                // Pede permissão ao usuário
                Notification.requestPermission().then(permission => {
                    if (permission === "granted") {
                        // Cria e exibe a notificação
                        new Notification("Senha", {
                            body: `Senha nova na fila!`,
                        });
                    }
                });
            } else {
                console.log("O navegador não suporta notificações.");
            }
        }

        socket.emit('get_queue_status');
    </script>
</body>

</html>